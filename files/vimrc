"===========================================================================
" 项目: vim 配置文件
" 作者: modefied by cwzebras
" 安装: sudo apt-get install vim-gnome
"===========================================================================
source /etc/vim/vimrc

set nrformats=
set autochdir
set nocompatible
" 设置编码
set fencs=ucs-bom,utf-8,cp936,gbk,gb2312,gb18030
"显示行号
set nu!
" 设置增量式搜索
set incsearch
" 查找结果高亮度显示
set hlsearch
" 搜索时忽略大小写
set ignorecase
" tab宽度
set tabstop=4
set autoindent shiftwidth=4
set shiftwidth=4
" C/C++注释
set comments=://
" 修正自动C式样注释功能 <2005/07/16>
set comments=s1:/*,mb:*,ex0:/
" 增强检索功能
set tags=./tags,./../tags,./**/tags
" 保存文件格式
set fileformats=unix,dos
" 显示命令行
set showcmd
" 命令行高度
set cmdheight=1
" 使用cscope
if has("cscope")
set csprg=/usr/bin/cscope
set csto=0
set cst
set nocsverb
"set virtualedit=all
" add any database in current directory
if filereadable("cscope.out")
cs add cscope.out
" else add database pointed to by environment
elseif $CSCOPE_DB != ""
cs add $CSCOPE_DB
endif
set csverb
endi
" 中文帮助
if version > 603
set helplang=cn
endi

filetype plugin indent on

" added by itag
filetype plugin on
"set autoindent
" 使用空格替换tab
set expandtab
set sm
"highlight Search cterm=bold,reverse
"highlight Search term=standout ctermfg=4 ctermbg=7

"set bomb

let fortran_have_tabs=1

" for latex
"set grepprg=grep\ -nH\ $*
"-- pdflatex
let g:Tex_DefaultTargetFormat='pdf'
"let g:Tex_CompileRule_pdf='pdflatex  -file-line-error -synctex=1 -interaction=nonstopmode $*'
let g:Tex_CompileRule_pdf='pdflatex  -file-line-error -interaction=nonstopmode $*'
let g:Tex_IgnoreLevel=7
let g:Tex_GotoError=0

"--- disable font mapping (like FEM)
let g:Tex_FontMaps=0
set foldmethod=manual
set nofoldenable
"setlocal spell

syntax on
set nowrap

set viminfo='50,f1,\"50
set complete=.,w,b,t,i

"if has('multi_byte_ime')
   "highlight CursorIM guibg=Blue guifg=NONE
   highlight Cursor guibg=Green guifg=NONE
"endif
"
set viminfo='10,\"100,:20,%,n~/.viminfo

au BufReadPost * if line("'\"") > 0|if line("'\"") <= line("$")|exe("norm '\"")|else|exe "norm $"|endif|endif

imap <C-H> <left>
imap <C-J> <up>
imap <C-K> <down>
imap <C-L> <right>

vmap ,mc !boxes -d c-cmt<CR>
nmap ,mc !!boxes -d c-cmt<CR>
vmap ,xc !boxes -d c-cmt -r<CR>
nmap ,xc !!boxes -d c-cmt -r<CR>

autocmd BufEnter * nmap ,mc !!boxes -d pound-cmt<CR>
autocmd BufEnter * vmap ,mc !boxes -d pound-cmt<CR>
autocmd BufEnter * nmap ,xc !!boxes -d pound-cmt -r<CR>
autocmd BufEnter * vmap ,xc !boxes -d pound-cmt -r<CR>
autocmd BufEnter *.html nmap ,mc !!boxes -d html-cmt<CR>
autocmd BufEnter *.html vmap ,mc !boxes -d html-cmt<CR>
autocmd BufEnter *.html nmap ,xc !!boxes -d html-cmt -r<CR>
autocmd BufEnter *.html vmap ,xc !boxes -d html-cmt -r<CR>
autocmd BufEnter *.[chly],*.[pc]c nmap ,mc !!boxes -d c-cmt<CR>
autocmd BufEnter *.[chly],*.[pc]c vmap ,mc !boxes -d c-cmt<CR>
autocmd BufEnter *.[chly],*.[pc]c nmap ,xc !!boxes -d c-cmt -r<CR>
autocmd BufEnter *.[chly],*.[pc]c vmap ,xc !boxes -d c-cmt -r<CR>
autocmd BufEnter *.C,*.cpp,*.java nmap ,mc !!boxes -d java-cmt<CR>
autocmd BufEnter *.C,*.cpp,*.java vmap ,mc !boxes -d java-cmt<CR>
autocmd BufEnter *.C,*.cpp,*.java nmap ,xc !!boxes -d java-cmt -r<CR>
autocmd BufEnter *.C,*.cpp,*.java vmap ,xc !boxes -d java-cmt -r<CR>
autocmd BufEnter .vimrc*,.exrc nmap ,mc !!boxes -d vim-cmt<CR>
autocmd BufEnter .vimrc*,.exrc vmap ,mc !boxes -d vim-cmt<CR>
autocmd BufEnter .vimrc*,.exrc nmap ,xc !!boxes -d vim-cmt -r<CR>
autocmd BufEnter .vimrc*,.exrc vmap ,xc !boxes -d vim-cmt -r<CR>
autocmd BufEnter *.f90,*.F90 nmap ,mc !!boxes -d fortran-hl<CR>
autocmd BufEnter *.f90,*.F90 vmap ,mc !boxes -d fortran-hl<CR>
autocmd BufEnter *.f90,*.F90 nmap ,xc !!boxes -d fortran-hl -r<CR>
autocmd BufEnter *.f90,*.F90 vmap ,xc !boxes -d fortran-hl -r<CR>

if has("cscope")
set csprg=/usr/bin/cscope
set csto=0
set cst
set nocsverb
" add any database in current directory
if filereadable("cscope.out")
cs add cscope.out
" else add database pointed to by environment
elseif $CSCOPE_DB != ""
cs add $CSCOPE_DB
endif
set csverb
set cscopetag
set cscopequickfix=s-,g-,c-,d-,t-,e-,f-,i-
endif

" do not highlight spaces at the start of a line in changelog
let g:changelog_spacing_errors = 0

set laststatus=2
highlight StatusLine cterm=bold ctermfg=yellow ctermbg=blue
function! CurDir()
    let curdir = substitute(getcwd(), $HOME, "~", "g")
    return curdir
endfunction
set statusline=[%n]\ %f%m%r%h\ \|\ \ pwd:\ %{CurDir()}\ \ \|%=\|\ %l,%c\ %p%%\ \|\ %{$USER}\ @\ %{hostname()}

"===== for taglist plugin ======
let Tlist_Exit_OnlyWindow = 1     " exit if taglist is last window open
let Tlist_Show_One_File = 1       " Only show tags for current buffer
let Tlist_Enable_Fold_Column = 0  " no fold column (only showing one file)

set isf-=\=

set linebreak
set showbreak=>

if &diff
    colorscheme evening
    set diffopt+=iwhite
endif

colorscheme desert

nmap <S-F> :set syntax=fortran<CR>:let b:fortran_fixed_source=!b:fortran_fixed_source<CR>:set syntax=text<CR>:set syntax=fortran<CR>
autocmd FileType tex setlocal isk+=:,_

augroup filetypedetect
au BufNewFile,BufRead *.asy setf asy
augroup END
filetype plugin on

let g:SuperTabRetainCompletionType = 1
let g:SuperTabDefaultCompletionType = "<C-X><C-O>"

inoremap <C-XJ>      <C-X><C-J>
inoremap <C-XF>      <C-X><C-F>
inoremap <C-XD>      <C-X><C-D>
inoremap <C-XL>      <C-X><C-L>

set foldmethod=indent "设置使用语法方式折叠

au BufRead,BufNewFile *.todo setfiletype todo
if join(getline(1,100),' ') =~? '\<#\?TODO\>'
    setfiletype todo
endif

" set dycv
 " look up current word under cursor
 function! SearchWord()
     let expr = '!ydcv -s ' .expand("<cword>")
     exec expr
 endfunction
        
 " translate selected text
 function! SearchWord_v(type, ...)
     let sel_save = &selection
     let &selection = "inclusive"
     let reg_save = @@
            
     if a:0
         silent exe "normal! `<" . a:type . "`>y"
     elseif a:type == 'line'
         silent exe "normal! '[V']y"
     elseif a:type == 'block'
         silent exe "normal! `[\<C-V>`]y"
     else
         silent exe "normal! `[v`]y"
     endif
             
     let word = @@
     let expr = '!ydcv "' . word . '"'
     exec expr
            
     let &selection = sel_save
     let @@ = reg_save
 endfunction
            
 nnoremap <Leader>d :call SearchWord()<CR>
 vnoremap <Leader>d :<C-U>call SearchWord_v(visualmode(), 1)<cr>

"=====vundle
set nocompatible " be iMproved, required 
filetype off " required 
  set rtp+=~/.vim/bundle/Vundle.vim/ 
call vundle#begin() 
  " alternatively, pass a path where Vundle should install plugins 
  "let path = '~/some/path/here' 
  "call vundle#rc(path) 

  " let Vundle manage Vundle, required 
  Plugin 'gmarik/vundle' 

  " The following are examples of different formats supported. 
  " Keep Plugin commands between here and filetype plugin indent on. 
  " scripts on GitHub repos 
  Plugin 'tpope/vim-fugitive' 
  Plugin 'Lokaltog/vim-easymotion' 
  Plugin 'tpope/vim-rails.git' 
  " The sparkup vim script is in a subdirectory of this repo called vim. 
  " Pass the path to set the runtimepath properly. 
  Plugin 'rstacruz/sparkup', {'rtp': 'vim/'} 
  " scripts from http://vim-scripts.org/vim/scripts.html 
  Plugin 'L9' 
  Plugin 'FuzzyFinder' 
  " scripts not on GitHub 
  Plugin 'git://git.wincent.com/command-t.git' 
  Plugin 'git://github.com/scrooloose/nerdtree.git'
  " git repos on your local machine (i.e. when working on your own plugin) 
  " Plugin 'file:///home/gmarik/path/to/plugin' 
  " ... 
  
  filetype plugin indent on " required 
  " To ignore plugin indent changes, instead use: 
  "filetype plugin on 
  " 
  " Brief help 
  " :PluginList - list configured plugins 
  " :PluginInstall(!) - install (update) plugins 
  " :PluginSearch(!) foo - search (or refresh cache first) for foo 
  " :PluginClean(!) - confirm (or auto-approve) removal of unused plugins 
  " 
  " see :h vundle for more details or wiki for FAQ 
  " NOTE: comments after Plugin commands are not allowed. 
  " Put your stuff after this line

  " latexlivepreview
  Plugin 'xuhdev/vim-latex-live-preview'
  filetype plugin on " required 

  Plugin 'vim-pandoc/vim-pandoc'
  filetype plugin on " required 

  Plugin 'lervag/vimtex'
  filetype plugin on " required 

call vundle#end() 

let g:livepreview_previewer = 'evince'

let g:livepreview_engine = 'latexmk -xelatex'


colorscheme desert
